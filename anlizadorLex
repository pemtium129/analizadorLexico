%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct _token{
    int clase;
    char valor[32];
    int line;
} token;

token TOKEN;

enum clase {ID=1, RESERVADA, ARITMETICO, RELACIONAL, ASIGNACION, LOGICO, PUNTUACION, ENTERO, DECIMAL};

void error(char *s);
%}

%option yylineno

letra [a-zA-Z]
letra_ {letra}|_
digito [0-9]
id \#({letra_}|{digito})+
reservadas "@if"|"@else"|"@while"
aritmetico [\+\-\*\/\%] 
relacional \<=|\>=|\<|==|\!=|\>
asignacion \=
logico [\&\|\!]
operador {aritmetico}|{relacional}|{asignacion}|{logico}
entero ({digito})+
real {digito}*"."{digito}+|{digito}+"."{digito}*
numero {entero}|{real}
puntuacion [\{\}\(\)\,\;]
espacios [ \t\n\r]
comentario "/*"({digito}|{letra}|{operador}|{puntuacion}|{espacios})*"*/"

%%
{id}    { 
            TOKEN.clase = ID;
            strcpy(TOKEN.valor, yytext);
            TOKEN.line = yylineno;
            return ID;
        }
{reservadas}    { 
            TOKEN.clase = RESERVADA;
            strcpy(TOKEN.valor, yytext);
            TOKEN.line = yylineno;
            return RESERVADA;
        }
{aritmetico}    { 
            TOKEN.clase = ARITMETICO;
            strcpy(TOKEN.valor, yytext);
            TOKEN.line = yylineno;
            return ARITMETICO;
        }
{relacional}    { 
            TOKEN.clase = RELACIONAL;
            strcpy(TOKEN.valor, yytext);
            TOKEN.line = yylineno;
            return RELACIONAL;
        }
{asignacion}    { 
            TOKEN.clase = ASIGNACION;
            strcpy(TOKEN.valor, yytext);
            TOKEN.line = yylineno;
            return ASIGNACION;
        }
{logico}    { 
            TOKEN.clase = LOGICO;
            strcpy(TOKEN.valor, yytext);
            TOKEN.line = yylineno;
            return LOGICO;
        }
{puntuacion}    { 
            TOKEN.clase = PUNTUACION;
            strcpy(TOKEN.valor, yytext);
            TOKEN.line = yylineno;
            return PUNTUACION;
        }
{entero}    { 
                TOKEN.clase = ENTERO;
                strcpy(TOKEN.valor, yytext);
                TOKEN.line = yylineno;
                return ENTERO;
            }
{real}  { 
                TOKEN.clase = DECIMAL;
                strcpy(TOKEN.valor, yytext);
                TOKEN.line = yylineno;
                return DECIMAL;
        }
{espacios} {/* Ignora los espacios en blanco*/}
{comentario} {/* Ignora los comentarios*/}

.   {error(yytext);}

%%
int yywrap(){
    return 1;
}

void error(char *s){
    printf("Error léxico: %s, en la línea %d\n",s,yylineno);
}

int main(int argc, char **argv){
    FILE *f;
    if(argc<2){
        printf("Falta archivo\n");
        exit(-1);
    }
    f = fopen(argv[1],"r");
    if(!f){
        printf("No se puede abrir el archivo\n");
        exit(-1);
    }
    yyin = f;
    int tok = yylex();
    while(tok != 0){
        printf("%d\n",tok);
        tok = yylex();
    }    
    return 0;
}
